version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-data:/var/lib/kafka/data

  # Initialize Kafka topics
  init-kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: init-kafka
    depends_on:
      - kafka
    entrypoint: ['/bin/bash', '-c']
    command: |
      "
      # Wait for Kafka to be ready
      echo 'Waiting for Kafka @ kafka:29092 ...'
      until kafka-topics --bootstrap-server kafka:29092 --list &>/dev/null; do
        sleep 2
      done
      echo 'Kafka is up.'

      echo -e 'Creating core kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic orders --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=604800000
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic inventory --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=604800000
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payments --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=604800000
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic shipping --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=604800000

      echo -e 'Create DLQs kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic dlq.orders --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=2592000000
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic dlq.inventory --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=2592000000
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic dlq.payments --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=2592000000
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic dlq.shipping --partitions 1 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=2592000000
      "

  # Optional: Kafka UI for easier management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
      - init-kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data: